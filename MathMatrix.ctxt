#BlueJ class context
comment0.target=MathMatrix
comment1.params=mat
comment1.target=MathMatrix(int[][])
comment1.text=\n\ create\ a\ MathMatrix\ with\ cells\ equal\ to\ the\ values\ in\ mat.\n\ A\ "deep"\ copy\ of\ mat\ is\ made.\n\ Changes\ to\ mat\ after\ this\ constructor\ do\ not\ affect\ this\n\ Matrix\ and\ changes\ to\ this\ MathMatrix\ do\ not\ affect\ mat\n\ @param\ \ mat\ \ mat\ \!\=null,\ mat.length\ >\ 0,\ mat[0].length\ >\ 0,\n\ mat\ is\ a\ rectangular\ matrix\ \n
comment10.params=factor
comment10.target=void\ scale(int)
comment10.text=\n\ Multiply\ all\ elements\ of\ this\ MathMatrix\ by\ factor.\n\ <br>pre\:\ none\n\ <br>post\:\ all\ elements\ in\ this\ matrix\ have\ been\ multiplied\ by\ factor.\ \n\ In\ other\ words\ after\ this\ method\ has\ been\ called\ getVal(r,c)\ \=\ old\ getVal(r,\ c)\ *\ factor\n\ for\ all\ valid\ r\ and\ c.\n\ @param\ factor\ the\ value\ to\ multipy\ every\ cell\ in\ this\ Matrix\ by.\n
comment11.params=
comment11.target=MathMatrix\ getTranspose()
comment11.text=\n\ accessor\:\ get\ a\ transpose\ of\ this\ MathMatrix.\ \n\ This\ Matrix\ is\ not\ changed.\n\ <br>pre\:\ none\n\ @return\ a\ transpose\ of\ this\ MathMatrix\n
comment12.params=rightHandSide
comment12.target=boolean\ equals(java.lang.Object)
comment12.text=\n\ override\ equals.\n\ @return\ true\ if\ rightHandSide\ is\ the\ same\ size\ as\ this\ MathMatrix\ and\ all\ values\ in\ the\n\ two\ MathMatrix\ objects\ are\ the\ same,\ false\ otherwise\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\n\ override\ toString.\n\ @return\ a\ String\ with\ all\ elements\ of\ this\ MathMatrix.\ \n\ Each\ row\ is\ on\ a\ seperate\ line.\n\ Spacing\ based\ on\ longest\ element\ in\ this\ Matrix.\n\ Each\ row\ stats\ and\ ends\ with\ a\ vertical\ bar\:\ '|'\n
comment14.params=
comment14.target=boolean\ isUpperTriangular()
comment14.text=\n\ Return\ true\ if\ this\ MathMatrix\ is\ upper\ triangular.\ To\n\ be\ upper\ triangular\ all\ elements\ below\ the\ main\ \n\ diagonal\ must\ be\ 0.<br>\n\ pre\:\ this\ is\ a\ square\ matrix.\ numRows()\ \=\=\ numCols()\ \ \n\ @return\ <tt>true</tt>\ if\ this\ MathMatrix\ is\ upper\ triangular,\n\ <tt>false</tt>\ otherwise.\ \n
comment15.params=mat
comment15.target=boolean\ rectangularMatrix(int[][])
comment2.params=numRows\ numCols\ initialVal
comment2.target=MathMatrix(int,\ int,\ int)
comment2.text=\n\ create\ a\ MathMatrix\ of\ the\ specified\ size\ with\ all\ cells\ set\ to\ the\ intialValue.\n\ <br>pre\:\ numRows\ >\ 0,\ numCols\ >\ 0\n\ <br>post\:\ create\ a\ matrix\ with\ numRows\ rows\ and\ numCols\ columns.\ \n\ All\ elements\ of\ this\ matrix\ equal\ initialVal.\n\ In\ other\ words\ after\ this\ method\ has\ been\ called\ getVal(r,c)\ \=\ initialVal\ \n\ for\ all\ valid\ r\ and\ c.\n\ @param\ numRows\ numRows\ >\ 0\n\ @param\ numCols\ numCols\ >\ 0\n\ @param\ initialVal\ all\ cells\ of\ this\ Matrix\ are\ set\ to\ initialVal\n
comment3.params=row\ col\ newValue
comment3.target=void\ changeElement(int,\ int,\ int)
comment3.text=\n\ change\ the\ value\ of\ one\ of\ the\ cells\ in\ this\ MathMatrix.\n\ <br>pre\:\ 0\ <\=\ row\ <\ numRows(),\ 0\ <\=\ col\ <\ numCols()\n\ <br>post\:\ getVal(row,\ col)\ \=\ newValue\n\ @param\ row\ 0\ <\=\ row\ <\ numRows()\n\ @param\ col\ 0\ <\=\ col\ <\ numCols()\n
comment4.params=
comment4.target=int\ numRows()
comment4.text=\n\ Get\ the\ number\ of\ rows.\n\ @return\ the\ number\ of\ rows\ in\ this\ MathMatrix\n
comment5.params=
comment5.target=int\ numCols()
comment5.text=\n\ Get\ the\ number\ of\ columns.\n\ @return\ the\ number\ of\ columns\ in\ this\ MathMatrix\n
comment6.params=row\ col
comment6.target=int\ getVal(int,\ int)
comment6.text=\n\ get\ the\ value\ of\ a\ cell\ in\ this\ MathMatrix.\n\ <br>pre\:\ row\ \ 0\ <\=\ row\ <\ numRows(),\ col\ \ 0\ <\=\ col\ <\ numCols()\n\ @param\ \ row\ \ 0\ <\=\ row\ <\ numRows()\n\ @param\ \ col\ \ 0\ <\=\ col\ <\ numCols()\n\ @return\ the\ value\ at\ the\ specified\ position\n
comment7.params=rightHandSide
comment7.target=MathMatrix\ add(MathMatrix)
comment7.text=\n\ implements\ MathMatrix\ addition,\ (this\ MathMatrix)\ +\ rightHandSide.\n\ <br>pre\:\ rightHandSide.numRows()\ \=\ numRows(),\ rightHandSide.numCols()\ \=\ numCols()\n\ <br>post\:\ This\ method\ does\ not\ alter\ the\ calling\ object\ or\ rightHandSide\n\ @param\ rightHandSide\ rightHandSide.numRows()\ \=\ numRows(),\ rightHandSide.numCols()\ \=\ numCols()\n\ @return\ a\ new\ MathMatrix\ that\ is\ the\ result\ of\ adding\ this\ Matrix\ to\ rightHandSide.\n\ The\ number\ of\ rows\ in\ the\ returned\ Matrix\ is\ equal\ to\ the\ number\ of\ rows\ in\ this\ MathMatrix.\n\ The\ number\ of\ columns\ in\ the\ returned\ Matrix\ is\ equal\ to\ the\ number\ of\ columns\ in\ this\ MathMatrix.\n
comment8.params=rightHandSide
comment8.target=MathMatrix\ subtract(MathMatrix)
comment8.text=\n\ implements\ MathMatrix\ subtraction,\ (this\ MathMatrix)\ -\ rightHandSide.\n\ <br>pre\:\ rightHandSide.numRows()\ \=\ numRows(),\ rightHandSide.numCols()\ \=\ numCols()\n\ <br>post\:\ This\ method\ does\ not\ alter\ the\ calling\ object\ or\ rightHandSide\n\ @param\ rightHandSide\ rightHandSide.numRows()\ \=\ numRows(),\ rightHandSide.numCols()\ \=\ numCols()\n\ @return\ a\ new\ MathMatrix\ that\ is\ the\ result\ of\ subtracting\ rightHandSide\ from\ this\ MathMatrix.\n\ The\ number\ of\ rows\ in\ the\ returned\ MathMatrix\ is\ equal\ to\ the\ number\ of\ rows\ in\ this\ MathMatrix.\n\ The\ number\ of\ columns\ in\ the\ returned\ MathMatrix\ is\ equal\ to\ the\ number\ of\ columns\ in\ this\ MathMatrix.\n
comment9.params=rightHandSide
comment9.target=MathMatrix\ multiply(MathMatrix)
comment9.text=\n\ implements\ matrix\ multiplication,\ (this\ MathMatrix)\ *\ rightHandSide.\n\ <br>pre\:\ rightHandSide.numRows()\ \=\ numCols()\n\ <br>post\:\ This\ method\ should\ not\ alter\ the\ calling\ object\ or\ rightHandSide\n\ @param\ rightHandSide\ rightHandSide.numRows()\ \=\ numCols()\n\ @return\ a\ new\ MathMatrix\ that\ is\ the\ result\ of\ multiplying\ this\ MathMatrix\ and\ rightHandSide.\n\ The\ number\ of\ rows\ in\ the\ returned\ MathMatrix\ is\ equal\ to\ the\ number\ of\ rows\ in\ this\ MathMatrix.\n\ The\ number\ of\ columns\ in\ the\ returned\ MathMatrix\ is\ equal\ to\ the\ number\ of\ columns\ in\ rightHandSide.\n
numComments=16
